require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, :type => :controller do

  let(:valid_session) { {} }

  before :each do
    @user = FactoryGirl.create(:user)
    sign_in @user
  end

  it 'destroys guest accounts' do
    @user.add_role(:guest)
    expect {
      get :destroy_guests }.to change(User, :count).by(-1)
    end

  it 'gives admin privileges' do
    admin = cur_admin
    get :give_admin_priv, {id: @user.id}
    expect(@user.is_admin?).to eq(true)
  end

  it 'revokes admin privileges' do
    admin = cur_admin
    get :revoke_admin_priv, {id: @user.id}
    expect(@user.is_admin?).to eq(false)
  end

  it 'blocks a user' do
    admin = cur_admin
    get :block_user, {id: @user.id}
    expect(@user.is_blocked?).to eq(true)
  end

  it 'unblocks a user' do
    admin = cur_admin
    get :unblock_user, {id: @user.id}
    expect(@user.is_blocked?).to eq(false)
  end

  it 'prevents non-admins from making changes' do
    user2 = cur_user
    expect( get :give_admin_priv, {id: @user.id} ).to redirect_to('/')
  end

  describe 'when another user is invited,' do

    it 'sends an invite email' do
      expect{ get :invite_user, {invite_email: "test@test.com"} }.to change{ActionMailer::Base.deliveries.count}.by(1)
    end

    it 'redirects to root' do
      expect( get :invite_user, {invite_email: "test@test.com"} ).to redirect_to('/')
    end
  end
end
